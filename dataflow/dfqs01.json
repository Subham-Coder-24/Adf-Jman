{
	"name": "dfqs01",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_customer_database",
						"type": "DatasetReference"
					},
					"name": "getcustomers"
				},
				{
					"dataset": {
						"referenceName": "ds_order_database",
						"type": "DatasetReference"
					},
					"name": "getorder"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "Customer"
				}
			],
			"transformations": [
				{
					"name": "FilteredCustomer"
				},
				{
					"name": "join1"
				},
				{
					"name": "FilteredOrder"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getcustomers",
				"source(output(",
				"          OrderID as string,",
				"          ProductID as string,",
				"          ProductName as string,",
				"          Quantity as string,",
				"          OrderTimestamp as string,",
				"          Price as string,",
				"          CustomerID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> getorder",
				"getcustomers filter(!equals(toString(Address),'NULL') && !equals(toString(City),'NULL') && !equals(toString(ZipCode),'NULL') && !equals(toString(State),'NULL') ) ~> FilteredCustomer",
				"FilteredCustomer, FilteredOrder join(getcustomers@CustomerID == getorder@CustomerID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"getorder filter(!equals(toString(OrderTimestamp),'NULL')) ~> FilteredOrder",
				"join1 filter(!equals(toString(getorder@CustomerID),'NULL')) ~> filter1",
				"filter1 select(mapColumn(",
				"          CustomerID = getcustomers@CustomerID,",
				"          FirstName,",
				"          LastName,",
				"          OrderID,",
				"          ProductID,",
				"          ProductName,",
				"          Price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(FirstName,",
				"          LastName,",
				"          ProductName),",
				"     count = count()>1) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          FirstName,",
				"          LastName,",
				"          ProductName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Customer"
			]
		}
	}
}