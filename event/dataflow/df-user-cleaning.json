{
	"name": "df-user-cleaning",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sql_raw_user_get",
						"type": "DatasetReference"
					},
					"name": "User"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_event_table",
						"type": "DatasetReference"
					},
					"name": "Event"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_booking_table",
						"type": "DatasetReference"
					},
					"name": "Booking"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_cleaned_user_write",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "DateFilter"
				},
				{
					"name": "email"
				},
				{
					"name": "RemoveDuplicates"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          email as string,",
				"          password as string,",
				"          name as string,",
				"          createdAt as timestamp,",
				"          updatedAt as timestamp,",
				"          role as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> User",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          description as string,",
				"          date as timestamp,",
				"          location as string,",
				"          price as double,",
				"          categoryId as integer,",
				"          createdAt as timestamp,",
				"          updatedAt as timestamp,",
				"          endTime as timestamp,",
				"          img as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Event",
				"source(output(",
				"          id as integer,",
				"          userId as integer,",
				"          eventId as integer,",
				"          quantity as integer,",
				"          total as double,",
				"          paymentId as integer,",
				"          createdAt as timestamp,",
				"          updatedAt as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Booking",
				"User cast(output(",
				"          createdAt as date,",
				"          updatedAt as date",
				"     ),",
				"     errors: true) ~> DateFilter",
				"DateFilter filter(endsWith(email, '@gmail.com')) ~> email",
				"email aggregate(groupBy(id),",
				"     each(match(name!='id'), $$ = first($$))) ~> RemoveDuplicates",
				"Event, Booking join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"RemoveDuplicates sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}